

used to manage vm automatically
for
  creating
  making changes
  cleaning up

vagrant does not replace hypervisors like vm wares etc, but it is built on top of them
it uses those tools to manage and create vm

vagrant solves problems like
  - os installation
  - time consumption
  - human errors
  - process replications


configurations for vagrant is stored in `Vagrantfile`


simple vagrant commands
  vagrant init boxname
  vagrant up
  vagrant ssh
  vagrant halt
  vagrant destroy

  vagrant box list
  vagrant status
  vagrant global-status  -> shows status of all vms

steps to creating vm with vagrant
  create a folder in local machine
  place a Vagrantfile in that folder
  issue command `vagrant up`
  login to vm with `vagrant ssh`
  stop with `vagrant halt`
  destroy or delete with `vagrant destroy`



differences between vagrant virtualization and docker virtualization

1. Vagrant uses full virtualization to create complete vms.
    this means theat it emulates a full hardware stack and runs a guest OS within the VM.
   
   Docker uses containerization, which leverages the host operating system's kernel to run containers. Containers share the host's kernel but are isolated from each other. 

   1. is the reason why vagrant is not suitable for production, because it would consume a lot resources
   Also, scaling Vagrant VMs for production workloads can be very challenging as it introduces various levels of complexity in setting up and managing hypervisors, guest OSes and VMs